extends ../layouts/default

block head
  meta(property="og:title"        content="Spring League Schedule")
  meta(property="og:url"          content="http://www.sflultimate.com/schedule")
  meta(property="og:description"  content="Discover the games schedule for the 2016's Spring League.")

  meta(property="og:image"        content="http://www.sflultimate.com/images/open-graph/schedule.jpg")
  meta(property="og:image:width"  content="1200")
  meta(property="og:image:height" content="630")

block content
  .container(ng-app="scheduleApp")
    .schedule(ng-controller="ScheduleViewController")
      section
        h1 Schedule
        p.lead
          | Pick your color to filter schedule by your team.<br>
          span.team-color(ng-repeat="color in teams" ng-class="color.toLowerCase()" ng-click="filterFor(color)")
      table.table.table-striped.table-bordered
        thead
          th Date
          th Time
          th(col-span="2") Matchup 
        tbody
          tr(ng-repeat="game in games | filter:colorFilter" ng-class="(game.timestamp - $parent.today > 0) ? '':'text-muted' ")
            td {{game.date | date: 'MMM d'}}
            td {{game.time}}
            td 
              span {{game.home}} vs. {{game.away}} 
              span(ng-if="game.homeScore && game.awayScore") ({{game.homeScore}}-{{game.awayScore}})
          tr(ng-class="(1461974400000 - $parent.today > 0) ? '':'text-muted' ")
            td Apr 30
            td 10:00AM-4:30PM
            td League Finals (at Amelia Earhart Park)

block js
  script(src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.9/angular.min.js")
  script.

    angular.module("scheduleApp", [])
      .controller("ScheduleViewController",function ($http, $scope, $filter) {

        $scope.games = [];
        $scope.teams = [];

        // Today plus one day of separation
        var dayInMilliseconds = 1000 * 60 * 60 * 24;
        $scope.today = new Date().getTime() - dayInMilliseconds;

        $scope.colorFilter = function (item) {
          return item;
        };

        $scope.filterFor = function (color) {
          $scope.colorFilter = function (game) {

            if (game.away === color || game.home === color) {

              if (game.away === color) {
                var home      = game.home;
                var homeScore = game.homeScore;

                var away      = game.away;
                var awayScore = game.awayScore;

                game.home = away;
                game.homeScore = awayScore;

                game.away = home;
                game.awayScore = homeScore;
              }

              if (game.home === color) {
                return true;
              }
            }
          }
        };

        var query = $http.get("/schedule?f=json");

        query.success(function (games) {

          $scope.games = games.map(function (game) {

            game.date      = new Date(game.date);
            game.timestamp = game.date.getTime();
            return game;
          });

          var teams = [];

          games.forEach(function (game) {
            if (teams.indexOf(game.home) === -1) {
              teams.push(game.home);
            }
          });

          $scope.teams = teams;

            
          var queryStats = $http.get("/stats.csv");
          queryStats.success(function (stats) {
            
            stats   = stats.split('\n');
            var headers = stats.splice(0,1)[0].split(',');

            var playedGames = headers.filter(function (d) {
              return d.toLowerCase().indexOf('scores') > -1;
            });


            stats = stats.map(function (stat, i) {
  
              var o = {};
              stat  = stat.split(',');

              stat.forEach(function (d, i) {
                o[headers[i]] = d;            
              });

              return o;
            });

            var scores = {};

            stats = stats.forEach(function (stat) {

              var statColor = stat["Team Color"];

              if (!scores[statColor]) {
                scores[statColor] = {};
              }

              playedGames.forEach(function (playedGame) {

                if (!scores[statColor][playedGame]) {
                  scores[statColor][playedGame] = 0;
                }

                var points = stat[playedGame].length > 0 ? parseInt(stat[playedGame]): 0;
                scores[statColor][playedGame] += points;
              });
            });


            $scope.games = $scope.games.map(function (game) {

              var date = $filter('date')(game.date, 'MM/dd/yy');

              game.homeScore = scores[game.home][date +" Scores"]  
              game.awayScore = scores[game.away][date +" Scores"];

              return game;
            });
          });


        });

        query.error(function (err) {
          console.log(err);
        });

      });